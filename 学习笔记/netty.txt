
AbstractBootstrap#doBind
	ChannelFuture regFuture = initAndRegister();
		channel = channelFactory.newChannel();
		init(channel);
			ChannelPipeline p = channel.pipeline();
			p.addLast(new ChannelInitializer<Channel>() {
				@Override
				public void initChannel(final Channel ch) throws Exception {  //  ---标注1---
					final ChannelPipeline pipeline = ch.pipeline();
					ChannelHandler handler = config.handler();
					if (handler != null) {
						pipeline.addLast(handler);
					}

					ch.eventLoop().execute(new Runnable() {   //在异步执行
						@Override
						public void run() {
							pipeline.addLast(new ServerBootstrapAcceptor(
									ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
						}
					});
				}
			});
		ChannelFuture regFuture = config().group().register(channel);
			AbstractChannel.AbstractUnsafe#register
				isCompatible(eventLoop) //校验是否为当前channel匹配的eventLoop   AbstractNioChannel匹配NioEventLoop
				register0(promise);
					doRegister(); //AbstractNioChannel#doRegister
						selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this); //javaChannel() 获取java原生NIO的channel, register() 将关注的事件注册到Selector
					pipeline.invokeHandlerAddedIfNeeded(); // 执行 ---标注1--- 
					safeSetSuccess(promise);	// 执行成功的回调	 ---标注2--- 
					pipeline.fireChannelRegistered();  // 触发通知已注册事件
	doBind0(regFuture, channel, localAddress, promise); //具体的绑定				
		channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);
			return pipeline.bind(localAddress, promise);  //AbstractChannel#bind 
				return tail.bind(localAddress, promise);  //DefaultChannelPipeline#bind   tail= DefaultChannelPipeline.TailContext
					AbstractChannelHandlerContext#bind
						final AbstractChannelHandlerContext next = findContextOutbound();
						EventExecutor executor = next.executor();
						next.invokeBind(localAddress, promise);
							((ChannelOutboundHandler) handler()).bind(this, localAddress, promise);
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					