
-------------------- 服务端启动  ServerBootstrap#bind  -------------------------------------

AbstractBootstrap#doBind
	ChannelFuture regFuture = initAndRegister();
		channel = channelFactory.newChannel();
		init(channel);
		    setChannelOptions(channel, options, logger);
            channel.attr(key).set(e.getValue());
			ChannelPipeline p = channel.pipeline();
			p.addLast(new ChannelInitializer<Channel>() {
				@Override
				public void initChannel(final Channel ch) throws Exception {  //  ---标注1---
					final ChannelPipeline pipeline = ch.pipeline();
					ChannelHandler handler = config.handler();
					if (handler != null) {
						pipeline.addLast(handler);
					}

					ch.eventLoop().execute(new Runnable() {   //在异步执行
						@Override
						public void run() {
						    // ServerBootstrapAcceptor#channelRead 将客户端的channel分发给childGroup 实现reactive的线程模型
							pipeline.addLast(new ServerBootstrapAcceptor(
									ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs));
						}
					});
				}
			});
		ChannelFuture regFuture = config().group().register(channel);  //  注册 Channel 到 EventLoopGroup
			AbstractChannel.AbstractUnsafe#register
				isCompatible(eventLoop) //校验是否为当前channel匹配的eventLoop   AbstractNioChannel匹配NioEventLoop
				register0(promise);
					doRegister(); //AbstractNioChannel#doRegister
						selectionKey = javaChannel().register(eventLoop().unwrappedSelector(), 0, this); //javaChannel() 获取java原生NIO的channel, register() 将关注的事件注册到Selector
					pipeline.invokeHandlerAddedIfNeeded(); // 执行 ---标注1---
					safeSetSuccess(promise);	// 执行成功的回调	 ---标注2---
					pipeline.fireChannelRegistered();  // 触发通知已注册事件
	doBind0(regFuture, channel, localAddress, promise); //具体的绑定  ---标注2---
		channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);  //channel = NioServerSocketChannel  调用父类AbstractChannel#bind
			return pipeline.bind(localAddress, promise);  //AbstractChannel#bind   pipeline = DefaultChannelPipeline 在构造方法中生成  在pipeline中存在这样的ChannelHandlerContext链:  head -> LoggingHandler -> tail
				return tail.bind(localAddress, promise);  //DefaultChannelPipeline#bind   tail = DefaultChannelPipeline.TailContext
					AbstractChannelHandlerContext#bind  ---注解1---
						final AbstractChannelHandlerContext next = findContextOutbound();  // next = LoggingHandler    Outbound 事件在 Pipeline 中的传输方向是 tail -> head,  所以上面由tail#bind开始
						EventExecutor executor = next.executor();
						next.invokeBind(localAddress, promise);
							((ChannelOutboundHandler) handler()).bind(this, localAddress, promise);  LoggingHandler#bind
							    ctx.bind(localAddress, promise);  // 向下继续传递bind事件  这句很重要，如果不加的话事件就在这里结束了
							        AbstractChannelHandlerContext#bind 这里又重新回去执行--注解1--的方法
							            next = findContextOutbound();  // 这里获取LoggingHandler的 next，就是DefaultChannelPipeline.HeadContext
							                ((ChannelOutboundHandler) handler()).bind(this, localAddress, promise); //HeadContext#bind
							                    unsafe.bind(localAddress, promise);
							                        AbstractChannel.AbstractUnsafe#bind
							                            doBind(localAddress); // 绑定端口
                                                            NioServerSocketChannel#doBind
                                                                javaChannel().bind(localAddress, config.getBacklog()); // 获取java的channel,并绑定  真正绑定的地方
                                                        pipeline.fireChannelActive();  //触发 Channel 激活的事件
                                                            AbstractChannelHandlerContext.invokeChannelActive(head); // 开始根据 pipeline 顺序执行 ChannelInboundHandler 的 channelActive()方法
                                                                ....... pipeline 中 ChannelInboundHandler 链表为  head -> LoggingHandler -> ServerBootstrap.ServerBootstrapAcceptor -> tail
                                                                        ServerBootstrap.ServerBootstrapAcceptor  这个InboundHandler 是ServerBootStrap在初始化的加入pipeline的
                                                                    ....
                                                                    readIfIsAutoRead();  在 DefaultChannelPipeline.HeadContext#channelActive 中执行
                                                                        channel.read();  // channel = NioServerSocketChannel  调用父类 AbstractChannel#read
                                                                            pipeline.read();  // pipeline = DefaultChannelPipeline  又开始在 pipeline 链里面开始调用。。。
                                                                                tail.read();  // pipeline链 倒叙调用 OutboundHandler (OutBoundHandler 都是倒叙开始的)
                                                                                .....
                                                                                    headContext#read
                                                                                        unsafe.beginRead();  // unsafe = NioMessageUnsafe
                                                                                            AbstractUnsafe#beginRead
                                                                                                doBeginRead();  // AbstractNioMessageChannel
                                                                                                    selectionKey.interestOps(interestOps | readInterestOp);  // readInterestOp = SelectionKey.OP_ACCEPT = 1 << 4 = 16;  开始接受客户端的连接


                                                                                            AbstractNioChannel.AbstractNioUnsafe#doBeginRead  //selectionKey注册accept事件，开始接受客户端连接
                                                                                            safeSetSuccess(promise); // 这里回调的是 ChannelFuture f = b.bind(PORT).sync().addListener(....) 的listener

						
						

